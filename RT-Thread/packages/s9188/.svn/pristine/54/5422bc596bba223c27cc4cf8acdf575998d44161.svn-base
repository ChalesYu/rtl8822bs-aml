#ifndef __OS_PRIV_H__
#define __OS_PRIV_H__

typedef wf_ptr 	rt_size_t;
typedef rt_size_t  SIZE_T;
//typedef __kernel_ssize_t        SSIZE_T;

#include "stddef.h"
#include "string.h"
#include "stdio.h"
#include "wf_typedef.h"
typedef wf_u32	loff_t;
typedef wf_ptr 	rt_ubase_t;
typedef union {
    unsigned long slock;
    struct __arch_tickets {
        unsigned short owner;
        unsigned short next;
    } tickets;
}spinlock_t;
#define to_str(x) #x
#define WF_GET_BE16(a) ((wf_u16) (((a)[0] << 8) | (a)[1]))
#define wMBOX1_MACID_CFG_LEN            7 //odm.c
#define wMBOX1_MEDIA_STATUS_RPT_LEN     3
#define wMBOX1_MSR_ROLE_RSVD    0
#define wMBOX1_MSR_ROLE_AP      2

enum wmbox1_cmd_9086X                     //odm.h
{
wMBOX1_9086X_MACID_CFG = 0x40,
};
#ifndef WF_BIT
#define WF_BIT(x)       (1ul << (x))
#endif
typedef enum ODM_SUPPORT_ABILITY_ENUM_
{
    ODM_BB_DYNAMIC_TXPWR = WF_BIT(2), //use
	wMBOX1_9086X_MEDIA_STATUS_RPT = 0x01, //use
} ODM_SUPPORT_ABILITY_ENUM;


typedef unsigned long           wf_irq;
typedef struct tasklet_struct   wf_tasklet;
#define wf_tasklet_hi_sched        tasklet_hi_schedule
#define wf_tasklet_sched           tasklet_schedule
#define wf_tasklet_init            tasklet_init

#define WF_OFFSETOF(type, field)            offsetof(type, field)
//#define WF_FIELD_SIZEOF(type, field)        FIELD_SIZEOF(type, field)
#define WF_FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))
//#define offsetof(type, field) ((size_t) &((type *)0)->field)
//#define WF_OFFSETOF(type, field)            offsetof(type, field)
#define WF_CONTAINER_OF(ptr, type, field)   container_of(ptr, type, field)
#define container_of(ptr, type, field)         ({ \
    (type *)((char *)ptr - ((size_t)&((type *)0)->field));})

#if (!defined(CONFIG_LITTLE_ENDIAN) && !defined(CONFIG_BIG_ENDIAN))
#define CONFIG_LITTLE_ENDIAN
#endif
#define le64_to_cpu     __le64_to_cpu
#define cpu_to_le32     __cpu_to_le32
#define le32_to_cpu     __le32_to_cpu
#define cpu_to_le16     __cpu_to_le16
#define le16_to_cpu     __le16_to_cpu
#define cpu_to_be64     __cpu_to_be64
#define be64_to_cpu     __be64_to_cpu
#define cpu_to_be32     __cpu_to_be32
#define be32_to_cpu     __be32_to_cpu
#define cpu_to_be16     __cpu_to_be16
#define be16_to_cpu     __be16_to_cpu
#define ___constant_swab16(x) ((wf_u16)(				\
	(((wf_u16)(x) & (wf_u16)0x00ffU) << 8) |			\
	(((wf_u16)(x) & (wf_u16)0xff00U) >> 8)))

#define ___constant_swab32(x) ((wf_u32)(				\
	(((wf_u32)(x) & (wf_u32)0x000000ffUL) << 24) |		\
	(((wf_u32)(x) & (wf_u32)0x0000ff00UL) <<  8) |		\
	(((wf_u32)(x) & (wf_u32)0x00ff0000UL) >>  8) |		\
	(((wf_u32)(x) & (wf_u32)0xff000000UL) >> 24)))

#define ___constant_swab64(x) ((wf_u64)(				\
	(((wf_u64)(x) & (wf_u64)0x00000000000000ffULL) << 56) |	\
	(((wf_u64)(x) & (wf_u64)0x000000000000ff00ULL) << 40) |	\
	(((wf_u64)(x) & (wf_u64)0x0000000000ff0000ULL) << 24) |	\
	(((wf_u64)(x) & (wf_u64)0x00000000ff000000ULL) <<  8) |	\
	(((wf_u64)(x) & (wf_u64)0x000000ff00000000ULL) >>  8) |	\
	(((wf_u64)(x) & (wf_u64)0x0000ff0000000000ULL) >> 24) |	\
	(((wf_u64)(x) & (wf_u64)0x00ff000000000000ULL) >> 40) |	\
	(((wf_u64)(x) & (wf_u64)0xff00000000000000ULL) >> 56)))

#define ___constant_swahw32(x) ((wf_u32)(			\
	(((wf_u32)(x) & (wf_u32)0x0000ffffUL) << 16) |		\
	(((wf_u32)(x) & (wf_u32)0xffff0000UL) >> 16)))

#define ___constant_swahb32(x) ((wf_u32)(			\
	(((wf_u32)(x) & (wf_u32)0x00ff00ffUL) << 8) |		\
	(((wf_u32)(x) & (wf_u32)0xff00ff00UL) >> 8)))

#define __cpu_to_le64(x)        ((  wf_u64)(wf_u64)(x))
#define __le64_to_cpu(x)        ((  wf_u64)(wf_u64)(x))
#define __cpu_to_le32(x)        ((  wf_u32)(wf_u32)(x))
#define __le32_to_cpu(x)        ((  wf_u32)(wf_u32)(x))
#define __cpu_to_le16(x)        ((  wf_u16)(wf_u16)(x))
#define __le16_to_cpu(x)        ((  wf_u16)(wf_u16)(x))
#define __cpu_to_be64(x)        ((  wf_u64)___constant_swab64((x)))
#define __be64_to_cpu(x)        ___constant_swab64((  wf_u64)(wf_u64)(x))
#define __cpu_to_be32(x)        ((  wf_u32)___constant_swab32((x)))
#define __be32_to_cpu(x)        ___constant_swab32((  wf_u32)(wf_u32)(x))
#define __cpu_to_be16(x)        ((  wf_u16)___constant_swab16((x)))
#define __be16_to_cpu(x)        ___constant_swab16((  wf_u16)(wf_u16)(x))

#ifndef htonl
#define htonl(x)        __cpu_to_be32(x)
#endif
#ifndef ntohl
#define ntohl(x)        __be32_to_cpu(x)
#endif
#ifndef htons
#define htons(x)        __cpu_to_be16(x)
#endif
#ifndef ntohs
#define ntohs(x)        __be16_to_cpu(x)
#endif


#define WF_HZ                      HZ
#define wf_os_api_do_div(n,base)   (n%base)
#define wf_yield                   fr_yield
#define wf_inline                  inline

#define wf_memcpy                  memcpy
#define wf_memcmp                  memcmp
#define wf_memset                  memset
#define wf_mdelay                  fr_mdelay
#define wf_udelay                  fr_delay
#define wf_msleep                  vTaskDelay
extern void vTaskDelay();

//#ifdef MEMDBG_ENABLE
//#include "memdbg.h"
//#define wf_kzalloc(sz) memdbg_kmalloc(sz,__func__,__LINE__)
//#define wf_kfree(ptr)    memdbg_kfree(ptr,__func__,__LINE__)
//#else
//void *vmalloc(unsigned long size);
//void vfree(const void *addr);
extern void vPortFree();

//#define wf_kzalloc(sz)             kzalloc(sz, in_interrupt()? GFP_ATOMIC : GFP_KERNEL)
//#define wf_kfree                   kfree
//#define wf_kzalloc(sz)             pvPortMalloc(sz)
static inline void *fr_alloc(size_t size)
{
}
static inline void *fr_malloc(size_t size)
{
}
#define wf_kzalloc(sz)             fr_alloc(sz)
#define wf_kfree(pv)               vPortFree(pv)
#endif
#define wf_vmalloc                 fr_malloc
#define wf_vfree                   fr_free
#define wf_alloc_skb(sz)           fr_malloc
#define wf_free_skb                fr_free

#define wf_packed                 __attribute__((__packed__))

typedef struct work_struct*  wf_work_struct;
typedef struct workqueue_struct  wf_workqueue_struct;
typedef void (*work_func)(wf_work_struct *work);
typedef struct wf_workqueue_mgnt_st_ wf_workqueue_mgnt_st;

typedef struct
{
    char *workqueue_name;
    work_func func;
}wf_workqueue_func_param_st;

typedef struct mutex*            wf_lock_mutex;
typedef struct semaphore*        wf_os_api_sema_t;
typedef struct timer_list*       wf_os_api_timer_t;
typedef struct file              wf_file;
//#endif



#define debugnumber 0
typedef struct
{
    wf_u8 gain:7, trsw:1;

} recv_agc_st;
typedef struct
{
    recv_agc_st path_agc[2];
    wf_u8 ch_corr[2];
    wf_u8 cck_sig_qual_ofdm_pwdb_all;
    wf_u8 cck_agc_rpt_ofdm_cfosho_a;
    wf_u8 cck_rpt_b_ofdm_cfosho_b;
    wf_u8 rsvd_1;
    wf_u8 noise_power_db_msb;
    wf_s8 path_cfotail[2];
    wf_u8 pcts_mask[2];
    wf_s8 stream_rxevm[2];
    wf_u8 path_rxsnr[2];
    wf_u8 noise_power_db_lsb;
    wf_u8 rsvd_2[3];
    wf_u8 stream_csi[2];
    wf_u8 stream_target_csi[2];
    wf_s8 sig_evm;
    wf_u8 rsvd_3;
    wf_u8 antsel_rx_keep_2:1;
    wf_u8 sgi_en:1;
    wf_u8 rxsc:2;
    wf_u8 idle_long:1;
    wf_u8 r_ant_train_en:1;
    wf_u8 ant_sel_b:1;
    wf_u8 ant_sel:1;

} recv_phy_status_st;
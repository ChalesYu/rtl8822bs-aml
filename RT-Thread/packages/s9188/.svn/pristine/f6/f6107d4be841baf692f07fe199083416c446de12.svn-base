
/* include */
#include "common.h"
//#include "hif.h"
#include "wf_debug.h"

/* macro */

/* type */

/* function declaration */

void wf_os_api_ind_scan_done (void *arg, wf_bool arg1, wf_u8 arg2)
{
  nic_info_st *pnic_info = arg;
  struct rt_wlan_device *wlan_dev = pnic_info->ndev;
  
  wf_wlan_mgmt_scan_que_for_rst_e scan_que_for_rst;
  wf_wlan_mgmt_scan_que_node_t *pscan_que_node = NULL;
  struct rt_wlan_info wlan_info;
  struct rt_wlan_buff buff;
  LOG_W("[%s]: enter", __func__);
  
  wf_wlan_mgmt_scan_que_for_begin(pnic_info, pscan_que_node)
  {
    memset(&wlan_info,0,sizeof(struct rt_wlan_info));
    wlan_info.band = pscan_que_node->bw_40mhz;
    wlan_info.channel = pscan_que_node->channel;
    memcpy(wlan_info.bssid,pscan_que_node->bssid,WF_ETH_ALEN);
    memcpy(wlan_info.ssid.val,pscan_que_node->ssid.data,sizeof(wf_80211_mgmt_ssid_t));
    wlan_info.ssid.len = pscan_que_node->ssid.length;
    wlan_info.rssi = pscan_que_node->signal_qual;
    wlan_info.datarate = pscan_que_node->spot_rate[15]* 500000;
    buff.data = &wlan_info;
    buff.len = sizeof(struct rt_wlan_info);
    /* indicate scan report event */
    rt_wlan_dev_indicate_event_handle(wlan_dev, RT_WLAN_DEV_EVT_SCAN_REPORT, &buff);
  }
  wf_wlan_mgmt_scan_que_for_end(scan_que_for_rst);
}

void wf_os_api_ind_connect (void *arg, wf_u8 arg1)
{
    LOG_W("[%s]: enter", __func__);
}

void wf_os_api_ind_disconnect (void *arg, wf_u8 arg1)
{
    LOG_W("[%s]: enter", __func__);
}

#ifdef CFG_ENABLE_ADHOC_MODE
void wf_os_api_cfg80211_unlink_ibss(void *arg)
{
    LOG_W("[%s]: enter", __func__);
}
#endif


void wf_os_api_ap_ind_assoc (void *arg, void *arg1, void *arg2, wf_u8 arg3)
{
  LOG_W("[%s]: enter", __func__);
}

void wf_os_api_ap_ind_disassoc (void *arg, void *arg1, wf_u8 arg2)
{
    LOG_W("[%s]: enter", __func__);
}

void wf_os_api_enable_all_data_queue (void *arg)
{
    LOG_W("The netif link up");
}

void wf_os_api_disable_all_data_queue (void *arg)
{
    LOG_W("The netif link down");
}

wf_u32 wf_os_api_rand32 (void)
{
   time_t t;
   
   srand((unsigned) time(&t));
   
   return rand();
}

//void *wf_os_api_get_ars(void *nic_info)
//{
//    nic_info_st * ni        = nic_info;
//    hif_node_st *hif_info   = ni->hif_node;
//    return hif_info->ars;
//}
//void  wf_os_api_set_ars(void *nic_info,void *ars)
//{
//    nic_info_st * ni        = nic_info;
//    hif_node_st *hif_info   = ni->hif_node;
//    hif_info->ars           = ars;
//}
//
//
//void *wf_os_api_get_odm(void *nic_info)
//{
//    nic_info_st * ni        = nic_info;
//    hif_node_st *hif_info   = ni->hif_node;
//    return hif_info->odm;
//}
//void  wf_os_api_set_odm(void *nic_info,void *odm)
//{
//    nic_info_st * ni        = nic_info;
//    hif_node_st *hif_info   = ni->hif_node;
//    hif_info->odm           = odm;
//}


wf_s32 wf_os_api_get_cpu_id(void)
{
#ifdef RT_USING_SMP
    return rt_hw_cpu_id();
#else 
    return 0;
#endif
}


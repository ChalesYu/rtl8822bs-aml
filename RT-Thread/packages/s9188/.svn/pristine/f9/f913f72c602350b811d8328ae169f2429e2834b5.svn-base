#ifndef __WF_OIDS_SEC_H__
#define __WF_OIDS_SEC_H__

/* Cihpher suite flags */
#define CIPHER_FLAG_NONE                        0x00000000
#define CIPHER_FLAG_WEP40                       0x00000001 /* BIT 1 */
#define CIPHER_FLAG_TKIP                        0x00000002 /* BIT 2 */
#define CIPHER_FLAG_CCMP                        0x00000008 /* BIT 4 */
#define CIPHER_FLAG_WEP104                      0x00000010 /* BIT 5 */
#define CIPHER_FLAG_WEP128                      0x00000020 /* BIT 6 */

typedef enum WF_DOT11_CIPHER_ALGORITHM {
  WF_DOT11_CIPHER_ALGO_NONE,
  WF_DOT11_CIPHER_ALGO_WEP40,
  WF_DOT11_CIPHER_ALGO_TKIP,
  WF_DOT11_CIPHER_ALGO_CCMP,
  WF_DOT11_CIPHER_ALGO_WEP104,
  WF_DOT11_CIPHER_ALGO_WEP,
  WF_DOT11_CIPHER_ALGO_IHV_START,
  WF_DOT11_CIPHER_ALGO_IHV_END
} WF_DOT11_CIPHER_ALGORITHM, *WF_PDOT11_CIPHER_ALGORITHM;


typedef enum _ENUM_NLO_CIPHER_ALGORITHM {
    NLO_CIPHER_ALGO_NONE = 0x00,
    NLO_CIPHER_ALGO_WEP40 = 0x01,
    NLO_CIPHER_ALGO_TKIP = 0x02,
    NLO_CIPHER_ALGO_CCMP = 0x04,
    NLO_CIPHER_ALGO_WEP104 = 0x05,
    NLO_CIPHER_ALGO_WPA_USE_GROUP = 0x100,
    NLO_CIPHER_ALGO_RSN_USE_GROUP = 0x100,
    NLO_CIPHER_ALGO_WEP = 0x101
} ENUM_NLO_CIPHER_ALGORITHM, * P_ENUM_NLO_CIPHER_ALGORITHM;


VOID wf_reset_cipher_abilities(PADAPTER pAdapter);

VOID wf_set_encryption(PADAPTER pAdapter, BOOLEAN isUnicast, ENUM_NLO_CIPHER_ALGORITHM algoId);

VOID wf_set_hw_default_cipher(PADAPTER pAdapter);

#endif 


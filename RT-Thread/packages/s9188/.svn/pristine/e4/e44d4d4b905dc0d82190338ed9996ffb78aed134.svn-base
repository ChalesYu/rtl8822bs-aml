
/* include */
#include "wf_os_api.h"
#include "wf_debug.h"

/* macro */

/* type */

/* function declaration */

void wf_os_api_thread_affinity(wf_u8 cpu_id)
{

}


void* wf_os_api_thread_create (void *tid, char *name, void *func, void *param)
{
  static wf_u8 wf_thread_prio = 0;
  rt_thread_t thread_id;
  
  if(wf_thread_prio > WF_THREAD_PRIORITY_NUM) {
    LOG_E("create thread error, please reconfig WF_THREAD_PRIORITY_NUM");
    return NULL;
  }
  
  thread_id = rt_thread_create(name, (void (*)(void *))func, param, 
                WF_THREAD_STACK_SIZE, WF_THREAD_PRIORITY_START + wf_thread_prio, 20);
  if(thread_id != NULL) {
    wf_thread_prio++;
    rt_thread_startup(thread_id);
    return thread_id;
  }
  
  return NULL;
}

wf_inline int wf_os_api_thread_wakeup (void *tid)
{
  rt_thread_t thread_id = (rt_thread_t)tid;
  
  return rt_thread_resume(thread_id);
}

int wf_os_api_thread_destory (void *tid)
{
  rt_thread_t thread_id = (rt_thread_t)tid;
  
  return rt_thread_delete(thread_id);
}

wf_inline wf_bool wf_os_api_thread_wait_stop (void *tid)
{
  rt_thread_t thread_id = (rt_thread_t)tid;
  
  return (rt_thread_find(thread_id->name) == NULL) ? wf_true : wf_false;
}

wf_inline void wf_os_api_thread_exit (void *comp)
{
  
}

